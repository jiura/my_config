-- Editor Display
vim.g.have_nerd_font = true

vim.o.number = true
vim.o.relativenumber = true
vim.o.showmode = false
vim.o.signcolumn = "no"

vim.opt.splitright = true
vim.opt.splitbelow = true

vim.opt.cursorline = true
vim.opt.scrolloff = 30

vim.opt.hlsearch = true

-- Editor Internals
vim.o.clipboard = "unnamedplus"
vim.o.undofile = true
vim.o.updatetime = 250
vim.o.timeoutlen = 300
vim.opt.inccommand = "split"

-- Editing
vim.o.breakindent = true

-- Movement
vim.o.ignorecase = true -- Case-insensitive search unless \C or one or more capital letters in the search term
vim.o.smartcase = true

-- Keymaps
vim.g.mapleader = " "
vim.g.maplocalleader = " "

--[ Movement keymaps
vim.keymap.set("n", "<Esc>", "<cmd>nohlsearch<CR>") -- Set highlight on search, but clear on pressing <Esc> in normal mode

--[ Diagnostic keymaps
vim.keymap.set("n", "<leader>e", vim.diagnostic.open_float, { desc = "Show diagnostic [E]rror messages" })
vim.keymap.set("n", "<leader>q", vim.diagnostic.setloclist, { desc = "Open diagnostic [Q]uickfix list" })

-- Autocommands

vim.api.nvim_create_autocmd("TextYankPost", { -- Highlight when yanking (copying) text
	desc = "Highlight when yanking text",
	group = vim.api.nvim_create_augroup("highlight-yank", { clear = true }),
	callback = function()
		vim.highlight.on_yank()
	end,
})

-- Install lazy.nvim
local lazypath = vim.fn.stdpath("data") .. "/lazy/lazy.nvim"
if not vim.loop.fs_stat(lazypath) then
	local lazyrepo = "https://github.com/folke/lazy.nvim.git"
	vim.fn.system({ "git", "clone", "--filter=blob:none", "--branch=stable", lazyrepo, lazypath })
end ---@diagnostic disable-next-line: undefined-field
vim.opt.rtp:prepend(lazypath)

-- [[ Configure and install plugins ]]
--  To check the current status of your plugins, run
--    :Lazy
require("lazy").setup({
	"tpope/vim-sleuth", -- Detect tabstop and shiftwidth automatically

	-- "gc" to comment visual regions/lines
	{ "numToStr/Comment.nvim", opts = {} },

	{ -- Adds git related signs to the gutter, as well as utilities for managing changes
		"lewis6991/gitsigns.nvim",
		opts = {
			signs = {
				add = { text = "+" },
				change = { text = "~" },
				delete = { text = "_" },
				topdelete = { text = "‾" },
				changedelete = { text = "~" },
			},
		},
	},

	{ -- Useful plugin to show you pending keybinds.
		"folke/which-key.nvim",
		event = "VimEnter", -- Sets the loading event to 'VimEnter'
		config = function() -- This is the function that runs, AFTER loading
			require("which-key").setup()

			-- Document existing key chains
			require("which-key").add({
				{ "<leader>c", group = "[C]ode" },
				{ "<leader>c_", hidden = true },
				{ "<leader>d", group = "[D]ocument" },
				{ "<leader>d_", hidden = true },
				{ "<leader>h", group = "Git [H]unk" },
				{ "<leader>h_", hidden = true },
				{ "<leader>r", group = "[R]ename" },
				{ "<leader>r_", hidden = true },
				{ "<leader>s", group = "[S]earch" },
				{ "<leader>s_", hidden = true },
				{ "<leader>t", group = "[T]oggle" },
				{ "<leader>t_", hidden = true },
				{ "<leader>w", group = "[W]orkspace" },
				{ "<leader>w_", hidden = true },
				{ "<leader>h", desc = "Git [H]unk", mode = { "n", "v" } },
			})
		end,
	},

	{ -- Fuzzy Finder (files, lsp, etc)
		"nvim-telescope/telescope.nvim",
		event = "VimEnter",
		branch = "0.1.x",
		dependencies = {
			"nvim-lua/plenary.nvim",
			{ -- If encountering errors, see telescope-fzf-native README for installation instructions
				"nvim-telescope/telescope-fzf-native.nvim",

				-- `build` is used to run some command when the plugin is installed/updated.
				-- This is only run then, not every time Neovim starts up.
				build = "make",

				-- `cond` is a condition used to determine whether this plugin should be
				-- installed and loaded.
				cond = function()
					return vim.fn.executable("make") == 1
				end,
			},
			{ "nvim-telescope/telescope-ui-select.nvim" },

			-- Useful for getting pretty icons, but requires a Nerd Font.
			{ "nvim-tree/nvim-web-devicons", enabled = vim.g.have_nerd_font },
		},
		config = function()
			-- [[ Configure Telescope ]]
			require("telescope").setup({
				defaults = {
					mappings = {
						i = {
							["<C-Up>"] = require("telescope.actions").preview_scrolling_up,
							["<C-Down>"] = require("telescope.actions").preview_scrolling_down,
							["<C-q>"] = require("telescope.actions").close,
						},
					},
				},
				extensions = {
					["ui-select"] = {
						require("telescope.themes").get_dropdown(),
					},
				},
			})

			-- Enable Telescope extensions if they are installed
			pcall(require("telescope").load_extension, "fzf")
			pcall(require("telescope").load_extension, "ui-select")

			local builtin = require("telescope.builtin")
			vim.keymap.set("n", "<leader>sh", builtin.help_tags, { desc = "[S]earch [H]elp" })
			vim.keymap.set("n", "<leader>sk", builtin.keymaps, { desc = "[S]earch [K]eymaps" })
			vim.keymap.set("n", "<C-f>", builtin.find_files, { desc = "Search [F]iles" })
			vim.keymap.set("n", "<leader>sw", builtin.grep_string, { desc = "[S]earch current [W]ord" })
			vim.keymap.set("n", "<C-g>", builtin.live_grep, { desc = "Search by [G]rep" })
			vim.keymap.set("n", "<leader>sd", builtin.diagnostics, { desc = "[S]earch [D]iagnostics" })
			vim.keymap.set("n", "<leader>sr", builtin.resume, { desc = "[S]earch [R]esume" })
			vim.keymap.set("n", "<leader>s.", builtin.oldfiles, { desc = '[S]earch Recent Files ("." for repeat)' })

			-- Slightly advanced example of overriding default behavior and theme
			vim.keymap.set("n", "<leader>/", function()
				builtin.current_buffer_fuzzy_find(require("telescope.themes").get_dropdown({
					winblend = 10,
					previewer = false,
				}))
			end, { desc = "[/] Fuzzily search in current buffer" })

			vim.keymap.set("n", "<leader>s/", function()
				builtin.live_grep({
					grep_open_files = true,
					prompt_title = "Live Grep in Open Files",
				})
			end, { desc = "[S]earch [/] in Open Files" })

			-- Shortcut for searching your Neovim configuration files
			vim.keymap.set("n", "<leader>sn", function()
				builtin.find_files({ cwd = vim.fn.stdpath("config") })
			end, { desc = "[S]earch [N]eovim files" })
		end,
	},

	{ -- LSP Configuration & Plugins
		"neovim/nvim-lspconfig",
		dependencies = {
			-- Automatically install LSPs and related tools to stdpath for Neovim
			{ "williamboman/mason.nvim", config = true }, -- NOTE: Must be loaded before dependants
			"williamboman/mason-lspconfig.nvim",
			"WhoIsSethDaniel/mason-tool-installer.nvim",

			-- Useful status updates for LSP
			{ "j-hui/fidget.nvim", opts = {} },

			-- `neodev` configures Lua LSP for your Neovim config, runtime and plugins
			-- used for completion, annotations and signatures of Neovim apis
			{ "folke/neodev.nvim", opts = {} },
		},
		config = function()
			vim.api.nvim_create_autocmd("LspAttach", {
				group = vim.api.nvim_create_augroup("lsp-attach", { clear = true }),
				callback = function(event)
					local map = function(keys, func, desc)
						vim.keymap.set("n", keys, func, { buffer = event.buf, desc = "LSP: " .. desc })
					end

					-- Jump to the definition of the word under your cursor
					--  To jump back, press <C-t>.
					map("gd", require("telescope.builtin").lsp_definitions, "[G]oto [D]efinition")

					-- Find references for the word under your cursor
					map("gr", require("telescope.builtin").lsp_references, "[G]oto [R]eferences")

					-- Jump to the implementation of the word under your cursor
					--  Useful when your language has ways of declaring types without an actual implementation.
					map("gI", require("telescope.builtin").lsp_implementations, "[G]oto [I]mplementation")

					-- Jump to definition of type of the word under your cursor
					map("<leader>D", require("telescope.builtin").lsp_type_definitions, "Type [D]efinition")

					-- Fuzzy find all the symbols in your current document
					--  Symbols are things like variables, functions, types, etc
					map("<leader>ds", require("telescope.builtin").lsp_document_symbols, "[D]ocument [S]ymbols")

					-- Fuzzy find all the symbols in your current workspace
					--  Similar to document symbols, except searches over your entire project
					map(
						"<leader>ws",
						require("telescope.builtin").lsp_dynamic_workspace_symbols,
						"[W]orkspace [S]ymbols"
					)

					-- Rename the variable under your cursor.
					--  Most Language Servers support renaming across files, etc.
					map("<leader>rn", vim.lsp.buf.rename, "[R]e[n]ame")

					-- Execute a code action, usually your cursor needs to be on top of an error
					-- or a suggestion from your LSP for this to activate.
					map("<leader>ca", vim.lsp.buf.code_action, "[C]ode [A]ction")

					-- Opens a popup that displays documentation about the word under your cursor
					map("K", vim.lsp.buf.hover, "Hover Documentation")

					map("gD", vim.lsp.buf.declaration, "[G]oto [D]eclaration")
				end,
			})

			vim.api.nvim_create_autocmd("LspDetach", {
				group = vim.api.nvim_create_augroup("lsp-detach", { clear = true }),
				callback = function(event)
					vim.lsp.buf.clear_references()
					vim.api.nvim_clear_autocmds({ group = "lsp-highlight", buffer = event.buf })
				end,
			})

			local capabilities = vim.lsp.protocol.make_client_capabilities()
			--capabilities = vim.tbl_deep_extend("force", capabilities, require("cmp_nvim_lsp").default_capabilities())  NOTE:(Joao) commented this line because of an error after removing autocomplete

			local servers = {
				-- See `:help lspconfig-all` for a list of all the pre-configured LSPs
				ts_ls = {},
				jsonls = {},
				clangd = {},
				gopls = {},
				omnisharp = {},
				lua_ls = {
					settings = {
						Lua = {
							completion = {
								callSnippet = "Replace",
							},
							-- You can toggle below to ignore Lua_LS's noisy `missing-fields` warnings
							-- diagnostics = { disable = { 'missing-fields' } },
							diagnostics = {
								globals = { "vim" },
							},
						},
					},
				},
				zls = {},
				html = {},
				pylsp = {},
			}

			--  To check the current status of installed tools and/or manually install
			--  other tools, you can run
			--    :Mason
			require("mason").setup()

			-- You can add other tools here that you want Mason to install
			local ensure_installed = vim.tbl_keys(servers or {})
			vim.list_extend(ensure_installed, {
				"stylua", -- Used to format Lua code
			})
			require("mason-tool-installer").setup({ ensure_installed = ensure_installed })

			require("mason-lspconfig").setup({
				handlers = {
					function(server_name)
						local server = servers[server_name] or {}
						-- This handles overriding only values explicitly passed
						-- by the server configuration above. Useful when disabling
						-- certain features of an LSP (for example, turning off formatting for tsserver)
						server.capabilities = vim.tbl_deep_extend("force", {}, capabilities, server.capabilities or {})
						require("lspconfig")[server_name].setup(server)
					end,
				},
			})
		end,
	},

	{ -- Autoformat
		"stevearc/conform.nvim",
		lazy = false,
		keys = {
			{
				"<leader>f",
				function()
					require("conform").format({ async = true, lsp_fallback = true })
				end,
				mode = "",
				desc = "[F]ormat buffer",
			},
		},
		opts = {
			notify_on_error = false,
			format_on_save = function(bufnr)
				-- Disable "format_on_save lsp_fallback" for languages that don't
				-- have a well standardized coding style. You can add additional
				-- languages here or re-enable it for the disabled ones.
				local disable_filetypes = { c = true, cpp = true }
				return {
					timeout_ms = 500,
					lsp_fallback = not disable_filetypes[vim.bo[bufnr].filetype],
				}
			end,
			formatters_by_ft = {
				lua = { "stylua" },
				-- Conform can also run multiple formatters sequentially
				-- python = { "isort", "black" },
				-- You can use a sub-list to tell conform to run *until* a formatter
				-- is found.
				-- javascript = { { "prettierd", "prettier" } },
			},
		},
	},

	{
		"rebelot/kanagawa.nvim",
		opts = {
			transparent = true,
			functionStyle = { italic = true },
		},
	},

	{
		"folke/tokyonight.nvim",
		priority = 1000, -- Make sure to load this before all the other start plugins.
		opts = {
			transparent = true,
			styles = {
				sidebars = "transparent",
				floats = "transparent",
			},
		},
		init = function()
			require("tokyonight").setup({
				transparent = true,
				on_colors = function(colors)
					colors.black = "#c5c6ca"
					colors.blue = "#5191ec"
					colors.blue0 = "#92a7e5"
					colors.blue1 = "#27a2b6"
					colors.blue2 = "#1a9db3"
					colors.blue5 = "#a3a3a3"
					colors.blue6 = "#3c6e6d"
					colors.blue7 = "#a9b8e0"
					colors.comment = "#9aa1c3"
					colors.cyan = "#198db6"
					colors.dark3 = "#9ea5c1"
					colors.dark5 = "#7c85ac"
					colors.diff = {
						add = "#d7e1e6",
						change = "#e1e4ed",
						delete = "#e8d8db",
						text = "#a9b8e0",
					}
					colors.error = "#d45a5a"
					colors.green = "#6c8c48"
					colors.green1 = "#499086"
					colors.green2 = "#4aa9b9"
					colors.hint = "#2ba994"
					colors.info = "#1a9db3"
					colors.magenta = "#ad6af5"
					colors.magenta2 = "#e0257a"
					colors.none = "NONE"
					colors.orange = "#b2b29b"
					colors.purple = "#905fcc"
					colors.rainbow =
						{ "#5191ec", "#a07d4a", "#6c8c48", "#2ba994", "#ad6af5", "#905fcc", "#cb6e00", "#ff4780" }
					colors.red = "#ff4780"
					colors.red1 = "#d45a5a"
					colors.teal = "#2ba994"
					colors.terminal = {
						black = "#c5c6ca",
						black_bright = "#b2b7d4",
						blue = "#5191ec",
						blue_bright = "#5c9cff",
						cyan = "#198db6",
						cyan_bright = "#1a96c2",
						green = "#6c8c48",
						green_bright = "#71a633",
						magenta = "#ad6af5",
						magenta_bright = "#b77aff",
						red = "#ff4780",
						red_bright = "#ff6489",
						white = "#7383c2",
						white_bright = "#5a7ae2",
						yellow = "#a07d4a",
						yellow_bright = "#b48934",
					}
					colors.terminal_black = "#b2b7d4"
					colors.todo = "#5191ec"
					colors.warning = "#a07d4a"
					colors.yellow = "#a07d4a"
				end,
			})

			vim.cmd.colorscheme("kanagawa-dragon")

			vim.keymap.set("n", "<leader>co", "<cmd>Telescope colorscheme<CR>", {})
			-- You can configure highlights by doing something like:
			vim.cmd.hi("Comment gui=none")
		end,
	},

	-- Highlight todo, notes, etc in comments
	{
		"folke/todo-comments.nvim",
		event = "VimEnter",
		dependencies = { "nvim-lua/plenary.nvim" },
		opts = {
			signs = false,
			highlight = {
				pattern = [[.*<(KEYWORDS).*\s]],
				after = "fg",
			},
		},
	},

	{ -- Collection of various small independent plugins/modules
		"echasnovski/mini.nvim",
		config = function()
			local statusline = require("mini.statusline")
			statusline.setup({ use_icons = vim.g.have_nerd_font })
			statusline.section_location = function()
				return "%2l:%-2v"
			end
		end,
	},

	{ -- Highlight, edit, and navigate code
		"nvim-treesitter/nvim-treesitter",
		build = ":TSUpdate",
		opts = {
			ensure_installed = {
				"bash",
				"c",
				"html",
				"lua",
				"luadoc",
				"markdown",
				"vim",
				"vimdoc",
				"c_sharp",
				"javascript",
				"json",
				"jsonc",
				"tsx",
				"typescript",
				"css",
			},

			auto_install = true,
			highlight = {
				enable = true,
				additional_vim_regex_highlighting = { "ruby" },
			},
			indent = { enable = true, disable = { "ruby" } },
		},
		config = function(_, opts)
			-- [[ Configure Treesitter ]]

			-- Prefer git instead of curl in order to improve connectivity in some environments
			require("nvim-treesitter.install").prefer_git = true
			---@diagnostic disable-next-line: missing-fields
			require("nvim-treesitter.configs").setup(opts)
		end,
	},

	{
		"ggandor/leap.nvim",
		opts = {},
		config = function()
			require("leap").create_default_mappings()
			vim.api.nvim_set_hl(0, "LeapBackdrop", { link = "Comment" })
		end,
	},

	{
		"ThePrimeagen/harpoon",
		branch = "harpoon2",
		dependencies = { "nvim-lua/plenary.nvim" },
	},

	"rstacruz/vim-closer",

	{
		"folke/snacks.nvim",
		priority = 1000,
		lazy = false,
		---@type snacks.Config
		opts = {
			bigfile = { enabled = true },
			dashboard = { enabled = true },
			--explorer = { enabled = true },
			image = { enabled = true },
			indent = { enabled = true },
			input = { enabled = true },
			picker = { enabled = true },
			notifier = { enabled = true },
			quickfile = { enabled = true },
			scope = { enabled = true },
			statuscolumn = { enabled = true },
		},
	},

	---@type LazySpec
	{
		"mikavilpas/yazi.nvim",
		event = "VeryLazy",
		dependencies = {
			"folke/snacks.nvim",
		},
		keys = {
			{
				"<leader>cf",
				mode = { "n", "v" },
				"<cmd>Yazi<cr>",
				desc = "Open yazi at the current file",
			},
			{
				"<leader>cw",
				"<cmd>Yazi cwd<cr>",
				desc = "Open the file manager in working directory",
			},
			{
				"<leader><up>",
				"<cmd>Yazi toggle<cr>",
				desc = "Resume the last yazi session",
			},
		},
		---@type YaziConfig | {}
		opts = {
			-- if you want to open yazi instead of netrw, see below for more info
			open_for_directories = false,
			keymaps = {
				show_help = "<f1>",
			},
		},
		-- 👇 if you use `open_for_directories=true`, this is recommended
		init = function()
			-- More details: https://github.com/mikavilpas/yazi.nvim/issues/802
			-- vim.g.loaded_netrw = 1
			vim.g.loaded_netrwPlugin = 1
		end,
	},

	{
		"debugloop/telescope-undo.nvim",
		dependencies = {
			{
				"nvim-telescope/telescope.nvim",
				dependencies = { "nvim-lua/plenary.nvim" },
			},
		},
		keys = {
			{
				"<leader>u",
				"<cmd>Telescope undo<cr>",
				desc = "undo history",
			},
		},
		opts = {
			extensions = {
				undo = {
					-- telescope-undo.nvim config, see below
				},
				-- no other extensions here, they can have their own spec too
			},
		},
		config = function(_, opts)
			-- Calling telescope's setup from multiple specs does not hurt, it will happily merge the
			-- configs for us. We won't use data, as everything is in it's own namespace (telescope
			-- defaults, as well as each extension).
			require("telescope").setup(opts)
			require("telescope").load_extension("undo")
		end,
	},
}, {
	ui = {
		-- If you are using a Nerd Font: set icons to an empty table which will use the
		-- default lazy.nvim defined Nerd Font icons, otherwise define a unicode icons table
		icons = vim.g.have_nerd_font and {} or {
			cmd = "⌘",
			config = "🛠",
			event = "📅",
			ft = "📂",
			init = "⚙",
			keys = "🗝",
			plugin = "🔌",
			runtime = "💻",
			require = "🌙",
			source = "📄",
			start = "🚀",
			task = "📌",
			lazy = "💤 ",
		},
	},
})

-- MY STUFF

-- setting my keymaps --

--- movement
vim.keymap.set({ "n", "v" }, "<C-Up>", "{") -- ctrl + up or down == go up/down paragraph
vim.keymap.set({ "n", "v" }, "<C-Down>", "}")
vim.keymap.set("i", "<C-Up>", "<C-o>{")
vim.keymap.set("i", "<C-Down>", "<C-o>}")

vim.keymap.set({ "n", "v" }, "<C-Left>", function() -- ctrl + left or right == go back/forward words
	local original_line_num = vim.api.nvim_win_get_cursor(0)[1]
	vim.api.nvim_feedkeys("b", "n", false)
	local new_line_num
	vim.defer_fn(function()
		new_line_num = vim.api.nvim_win_get_cursor(0)[1]
		if new_line_num ~= original_line_num then
			vim.api.nvim_feedkeys("$", "n", false)
		end
	end, 1)
end)
vim.keymap.set({ "n", "v" }, "<C-Right>", function()
	local original_line_num = vim.api.nvim_win_get_cursor(0)[1]
	vim.api.nvim_feedkeys("w", "n", false)
	local new_line_num
	vim.defer_fn(function()
		new_line_num = vim.api.nvim_win_get_cursor(0)[1]
		if new_line_num ~= original_line_num then
			vim.api.nvim_feedkeys("0", "n", false)
		end
	end, 1)
end)

vim.keymap.set("i", "<C-Left>", function() -- ctrl + left or right == go back/forward words (include mode)
	local original_line_num = vim.api.nvim_win_get_cursor(0)[1]
	local keys = vim.api.nvim_replace_termcodes("<C-o>b", false, false, true)
	vim.api.nvim_feedkeys(keys, "n", true)
	local new_line_num
	vim.defer_fn(function()
		new_line_num = vim.api.nvim_win_get_cursor(0)[1]
		if new_line_num ~= original_line_num then
			keys = vim.api.nvim_replace_termcodes("<C-o>$", false, false, true)
			vim.api.nvim_feedkeys(keys, "n", true)
		end
	end, 1)
end)
vim.keymap.set("i", "<C-Right>", function() -- ctrl + left or right == go back/forward words (include mode)
	local original_line_num = vim.api.nvim_win_get_cursor(0)[1]
	local keys = vim.api.nvim_replace_termcodes("<C-o>w", false, false, true)
	vim.api.nvim_feedkeys(keys, "n", true)
	local new_line_num
	vim.defer_fn(function()
		new_line_num = vim.api.nvim_win_get_cursor(0)[1]
		if new_line_num ~= original_line_num then
			keys = vim.api.nvim_replace_termcodes("<C-o>0", false, false, true)
			vim.api.nvim_feedkeys(keys, "n", true)
		end
	end, 1)
end)

vim.keymap.set({ "n", "v" }, "<Leader>1", "0", { desc = "Start of line" }) -- go to start of line

vim.keymap.set("n", "<Home>", "^")
vim.keymap.set("i", "<Home>", "<C-o>^")

--- editing

vim.keymap.set("i", "<C-BS>", "<C-W>", { noremap = true }) -- ctrl + backspace
vim.keymap.set("n", "x", '"_x') -- make it so x doesnt save deleted char to a register

vim.keymap.set("n", "<Leader><CR>", "o<Esc>", { desc = "New empty line below" })
vim.keymap.set("n", "<Leader><Backspace>", "O<Esc>", { desc = "New empty line above" })

vim.keymap.set("n", "i", function() -- indent when inserting on blank line
	if vim.api.nvim_get_current_line():match("^%s*$") then
		vim.api.nvim_feedkeys("cc", "n", false)
	else
		vim.api.nvim_feedkeys("i", "n", false)
	end
end)
vim.keymap.set("n", "<Insert>", function()
	if vim.api.nvim_get_current_line():match("^%s*$") then
		vim.api.nvim_feedkeys("cc", "n", false)
	else
		vim.api.nvim_feedkeys("i", "n", false)
	end
end)

--- misc

vim.keymap.set("n", "<leader>ts", function() -- toggle signs before line number
	if vim.o.signcolumn == "no" then
		vim.o.signcolumn = "yes"
	else
		vim.o.signcolumn = "no"
	end
end, { desc = "Toggle signcolumn" })

-- setting my configs --

--- movement configs
vim.o.whichwrap = "<>[]hl"

-- general options --
vim.o.tabstop = 4
vim.o.shiftwidth = 4

-- plugins setup --

-- harpoon
local harpoon = require("harpoon")
harpoon:setup()

vim.keymap.set("n", "<leader>ha", function()
	harpoon:list():add()
end, { desc = "Add to Harpoon" })
vim.keymap.set("n", "<C-h>", function()
	vim.api.nvim_command("write")
	harpoon.ui:toggle_quick_menu(harpoon:list())
end, { desc = "Harpoon quick menu" })
